# File: tests\MSAvDFunctions.Tests.ps1
# PowerShell 5.1 + Pester 5.x


BeforeAll {
    . "$PSScriptRoot\..\MSAvDFunctions.ps1"
	# Gemeinsame Dummy-Daten
$FakeToken = 'eyJhbGciOi...'
$SubId     = '00000000-0000-0000-0000-000000000000'
$RG        = 'rg-avd'
$HP        = 'hp-prod'
$SH        = 'sh01.contoso.com'
$USid      = '1'

$HostPoolId = "/subscriptions/$SubId/resourceGroups/$RG/providers/Microsoft.DesktopVirtualization/hostPools/$HP"
$SessionId  = "/subscriptions/$SubId/resourceGroups/$RG/providers/Microsoft.DesktopVirtualization/hostPools/$HP/sessionHosts/$SH/userSessions/$USid"
}

# Lade die zu testenden Funktionen




Describe 'Get-EitAzBearerToken' {
    Context 'Success' {
        BeforeEach {
            Mock -CommandName Invoke-RestMethod -MockWith {
                return @{
                    access_token = 'token-123'
                    expires_in   = 3600
                    token_type   = 'Bearer'
                }
            }
        }

        It 'returns Success = $true and a token' {
            $res = Get-EitAzBearerToken -AppId 'app' -AppSecret 'sec' -TenantId 'tenant'
            $res.Success | Should -BeTrue
            $res.BearerToken | Should -Be 'token-123'
            $res.Message | Should -Match 'Successfully'
        }
    }

    Context 'Failure (HTTP error)' {
        BeforeEach {
            Mock -CommandName Invoke-RestMethod -MockWith {
                throw '401 Unauthorized'
            }
        }

        It 'returns Success = $false and message' {
            $res = Get-EitAzBearerToken -AppId 'app' -AppSecret 'sec' -TenantId 'tenant'
            $res.Success | Should -BeFalse
            $res.Message | Should -Match 'Error retrieving token'
            $res.BearerToken | Should -BeNullOrEmpty
        }
    }

    Context 'Failure (no access_token in response)' {
        BeforeEach {
            Mock -CommandName Invoke-RestMethod -MockWith {
                return @{
                    something = 'else'
                }
            }
        }

        It 'returns Success = $false when token missing' {
            $res = Get-EitAzBearerToken -AppId 'app' -AppSecret 'sec' -TenantId 'tenant'
            $res.Success | Should -BeFalse
            $res.Message | Should -Match 'did not contain a bearer token'
        }
    }
}
